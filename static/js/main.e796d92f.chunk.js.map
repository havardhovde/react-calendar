{"version":3,"sources":["components/Calendar.tsx","components/DateInfo.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["dayjs","format","Calendar","props","width","height","rowHeight","displayOptions","showHeader","showWeekdays","locale","weekStartsOn","onSelect","date","setSelectedDate","extend","weekOfYear","isoWeek","advancedFormat","Dateinfo","selectedDate","App","useState","useDimensions","calendarRef","calendarDimensions","className","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAKAA,MAAQC,SAER,IAgBeC,EAhBE,SAACC,GAChB,OACI,cAAC,IAAD,CACIC,MAAOD,EAAMC,MACbC,OAAQF,EAAME,OACdC,UAAW,IACXC,eAAgB,CACdC,YAAY,EACZC,cAAc,GAEhBC,OAAQ,CAACC,aAAc,GACvBC,SAAU,SAACC,GAAD,OAAeV,EAAMW,gBAAgBd,IAAMa,GAAMZ,OAAO,mB,mDCb5ED,MAAQC,SACRD,IAAMe,OAAOC,KACbhB,IAAMe,OAAOE,KACbjB,IAAMe,OAAOG,KAEb,IAUeC,EAVE,SAAChB,GACd,OACI,8BACI,6BACKH,IAAMG,EAAMiB,cAAcnB,OAAO,qB,QCHlDD,MAAQC,SAWR,IA6BeoB,EA7BuB,WAAM,MAKFC,mBAAStB,OALP,mBAKnCoB,EALmC,KAKrBN,EALqB,OAOAS,cAPA,mBAOnCC,EAPmC,KAOtBC,EAPsB,KAS1C,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAUN,aAAcA,MAE1B,qBAAKO,IAAKH,EAAaE,UAAU,0BAAjC,SACE,cAAC,EAAD,CACEtB,MAAOqB,EAAmBrB,MAC1BC,OAAQoB,EAAmBpB,OAC3Be,aAAcA,EACdN,gBAAiBA,MAGrB,qBAAKY,UAAU,mBAAf,uBChCSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e796d92f.chunk.js","sourcesContent":["import dayjs from 'dayjs'\r\nimport InfiniteCalendar from \"react-infinite-calendar\";\r\nimport \"react-infinite-calendar/styles.css\";\r\nimport './Calendar.scss'\r\n\r\ndayjs().format()\r\n\r\nconst Calendar = (props: any) => {\r\n  return(\r\n      <InfiniteCalendar\r\n          width={props.width}\r\n          height={props.height} \r\n          rowHeight={100}\r\n          displayOptions={{\r\n            showHeader: false,\r\n            showWeekdays: false\r\n          }}\r\n          locale={{weekStartsOn: 1}}\r\n          onSelect={(date: any) => props.setSelectedDate(dayjs(date).format('MM/DD/YYYY'))}\r\n      />\r\n  )\r\n}\r\n\r\nexport default Calendar","import dayjs from 'dayjs';\r\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\r\nimport isoWeek from 'dayjs/plugin/isoWeek';\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\r\n\r\ndayjs().format()\r\ndayjs.extend(weekOfYear)\r\ndayjs.extend(isoWeek)\r\ndayjs.extend(advancedFormat)\r\n\r\nconst Dateinfo = (props: any) => {\r\n    return(\r\n        <div>\r\n            <h1>\r\n                {dayjs(props.selectedDate).format('Do MMMM YYYY')}\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dateinfo","import React, { useState } from 'react'\nimport './App.scss';\nimport dayjs from 'dayjs';\n// import weekOfYear from 'dayjs/plugin/weekOfYear';\n// import isoWeek from 'dayjs/plugin/isoWeek';\n// import Calendarcomp from './components/Calendarcomp'\nimport Calendar from './components/Calendar'\nimport Dateinfo from './components/DateInfo'\n//@ts-ignore\nimport useDimensions from \"react-use-dimensions\";\n\ndayjs().format()\n// dayjs.extend(weekOfYear)\n// dayjs.extend(isoWeek)\n\ntype PropsInterface = {\n  // currentDate?: dayjs.Dayjs;\n  // startWeek?: dayjs.Dayjs;\n  // endWeek?: dayjs.Dayjs;\n  selectedDate?: dayjs.Dayjs;\n}\n\nconst App: React.FC<PropsInterface> = () => {\n\n  // const [currentDate, setCurrentDate] = useState(dayjs())\n  // const startWeek = dayjs(currentDate).startOf('isoWeek')\n  // const endWeek = dayjs(currentDate).endOf('isoWeek')\n  const [selectedDate, setSelectedDate] = useState(dayjs())\n  \n  const [calendarRef, calendarDimensions] = useDimensions();\n\n  return (\n    <div className=\"App\">\n      <div className=\"components date\">\n        <Dateinfo selectedDate={selectedDate} />\n        </div>\n      <div ref={calendarRef} className=\"components calendarComp\">\n        <Calendar\n          width={calendarDimensions.width}\n          height={calendarDimensions.height}\n          selectedDate={selectedDate}\n          setSelectedDate={setSelectedDate}\n        />\n      </div>\n      <div className=\"components notes\">\n        Notes\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}