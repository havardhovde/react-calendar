{"version":3,"sources":["components/Calendarcomp.tsx","components/DateInfo.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Calendarcomp","props","calendar","i","push","startWeek","add","console","log","week","currentDate","monthYearDisplay","format","month","endWeek","year","className","onClick","setCurrentDate","dayjs","subtract","onChange","date","initialDate","dateFormat","showToday","showDefaultIcon","map","index","setSelectedDate","extend","weekOfYear","isoWeek","advancedFormat","Dateinfo","selectedDate","App","useState","startOf","endOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXA2EeA,EArEM,SAACC,GAIlB,IAFA,IAAMC,EAAW,GAETC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAASE,KAAKH,EAAMI,UAAUC,IAAI,CAACH,GAAI,MACvCI,QAAQC,IAAIN,GAGhB,IAQIO,EAAeR,EAAMS,YAAYD,OAEjCE,EAA2BV,EAAMS,YAAYE,OAAO,aAYxD,OATIX,EAAMI,UAAUQ,UAAYZ,EAAMa,QAAQD,UAEtCF,EADDV,EAAMI,UAAUU,SAAWd,EAAMa,QAAQC,OACxB,UAAMd,EAAMI,UAAUO,OAAO,aAA7B,cAA+CX,EAAMa,QAAQF,OAAO,cAGpE,UAAMX,EAAMI,UAAUO,OAAO,QAA7B,YAAwCX,EAAMa,QAAQF,OAAO,eAKjF,sBAAKI,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,wBAAQC,QAAS,WAxBzBhB,EAAMiB,eAAeC,IAAMlB,EAAMS,aAAaU,SAAS,EAAG,OAwBlD,kBADJ,QAEUX,EACN,wBAAQQ,QAAS,WAtBzBhB,EAAMiB,eAAeC,IAAMlB,EAAMS,aAAaJ,IAAI,EAAG,OAsB7C,wBAGJ,cAAC,aAAD,CACAe,SAAU,SAACC,GAAD,OAAuBrB,EAAMiB,eAAeI,IACtDC,YAAatB,EAAMS,YACnBc,WAAW,aACXC,WAAS,EACTC,iBAAe,IAEf,qBAAKV,UAAU,QAAf,SAEQd,EAASyB,KAAI,SAACL,EAAmBM,GAC7B,OACA,qBACAZ,UAAS,oBAAeY,GACxBX,QAAS,kBAAMhB,EAAM4B,gBAAgBP,EAAKV,OAAO,iBAFjD,SAKKU,EAAKV,OAAO,MAFZgB,QASjB,qBAAKZ,UAAU,eAAf,SACKL,Q,iBChEjBQ,MAAQP,SACRO,IAAMW,OAAOC,KACbZ,IAAMW,OAAOE,KACbb,IAAMW,OAAOG,KAEb,IAUeC,EAVE,SAACjC,GACd,OACI,8BACI,6BACKkB,IAAMlB,EAAMkC,cAAcvB,OAAO,qBCNlDO,MAAQP,SACRO,IAAMW,OAAOC,KACbZ,IAAMW,OAAOE,KAGb,IA0BeI,EA1BH,WAAO,IAAD,EAEsBC,mBAASlB,OAF/B,mBAETT,EAFS,KAEIQ,EAFJ,KAGVb,EAAyBc,IAAMT,GAAa4B,QAAQ,WACpDxB,EAAuBK,IAAMT,GAAa6B,MAAM,WAJtC,EAKwBF,mBAAS3B,GALjC,mBAKTyB,EALS,KAKKN,EALL,KAOhB,OACE,sBAAKb,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAUmB,aAAcA,MAE1B,qBAAKnB,UAAU,0BAAf,SACE,cAAC,EAAD,CACAN,YAAaA,EACbQ,eAAgBA,EAChBb,UAAWA,EACXS,QAASA,EACTqB,aAAcA,EACdN,gBAAiBA,MAEnB,qBAAKb,UAAU,mBAAf,uBCtBSwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.416bf370.chunk.js","sourcesContent":["import './Calendarcomp.scss'\r\nimport './Picker.scss'\r\nimport dayjs from 'dayjs';\r\nimport { DatePicker } from '@y0c/react-datepicker';\r\n\r\n\r\nconst Calendarcomp = (props: any) => {\r\n    \r\n    const calendar = []\r\n\r\n    for(let i = 0; i < 7; i++) {\r\n        calendar.push(props.startWeek.add([i], 'd'))\r\n        console.log(calendar)\r\n    }    \r\n    \r\n    const weekBack = () => {\r\n        props.setCurrentDate(dayjs(props.currentDate).subtract(1, 'w'))\r\n    }\r\n    \r\n    const weekForward = () => {\r\n        props.setCurrentDate(dayjs(props.currentDate).add(1, 'w'))\r\n    }\r\n    \r\n    let week: number = props.currentDate.week();\r\n    \r\n    let monthYearDisplay: string = props.currentDate.format('MMMM YYYY');\r\n\r\n    // Check if month changes mid-week\r\n    if (props.startWeek.month() !== props.endWeek.month()) {\r\n        if(props.startWeek.year() !== props.endWeek.year()) {\r\n            monthYearDisplay = `${props.startWeek.format('MMMM YYYY')} / ${props.endWeek.format('MMMM YYYY')}`\r\n        }\r\n        else {\r\n            monthYearDisplay = `${props.startWeek.format('MMMM')}/${props.endWeek.format('MMMM YYYY')}`\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='container'>\r\n            <div className=\"weekNumber\">\r\n                <button onClick={() => weekBack()}>back</button>\r\n                Week {week}\r\n                <button onClick={() => weekForward()}>forward</button> \r\n            </div>\r\n\r\n            <DatePicker\r\n            onChange={(date: dayjs.Dayjs) => props.setCurrentDate(date)}\r\n            initialDate={props.currentDate}\r\n            dateFormat=\"DD/MM/YYYY\"\r\n            showToday\r\n            showDefaultIcon\r\n            />\r\n            <div className='dates'>\r\n                {\r\n                    calendar.map((date: dayjs.Dayjs, index: number) => {\r\n                        return (\r\n                        <div \r\n                        className={` date date${index}`} \r\n                        onClick={() => props.setSelectedDate(date.format('DD MMM YYYY'))} \r\n                        key={index}\r\n                        > \r\n                            {date.format('D') }\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n\r\n            <div className='monthAndYear'>\r\n                {monthYearDisplay}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendarcomp","import dayjs from 'dayjs';\r\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\r\nimport isoWeek from 'dayjs/plugin/isoWeek';\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\r\n\r\ndayjs().format()\r\ndayjs.extend(weekOfYear)\r\ndayjs.extend(isoWeek)\r\ndayjs.extend(advancedFormat)\r\n\r\nconst Dateinfo = (props: any) => {\r\n    return(\r\n        <div>\r\n            <h1>\r\n                {dayjs(props.selectedDate).format('Do MMMM YYYY')}\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dateinfo","import { useState } from 'react'\nimport './App.scss';\nimport dayjs from 'dayjs';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport Calendarcomp from './components/Calendarcomp'\nimport Dateinfo from './components/DateInfo'\n\ndayjs().format()\ndayjs.extend(weekOfYear)\ndayjs.extend(isoWeek)\n\n\nconst App = () => {\n\n  const [currentDate, setCurrentDate] = useState(dayjs())\n  const startWeek: dayjs.Dayjs = dayjs(currentDate).startOf('isoWeek')\n  const endWeek: dayjs.Dayjs = dayjs(currentDate).endOf('isoWeek')\n  const [selectedDate, setSelectedDate] = useState(currentDate)\n\n  return (\n    <div className=\"App\">\n      <div className=\"components date\">\n        <Dateinfo selectedDate={selectedDate} />\n        </div>\n      <div className=\"components calendarComp\">\n        <Calendarcomp \n        currentDate={currentDate}\n        setCurrentDate={setCurrentDate}\n        startWeek={startWeek}\n        endWeek={endWeek}\n        selectedDate={selectedDate}\n        setSelectedDate={setSelectedDate}\n      /></div>\n      <div className=\"components notes\">Notes</div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}